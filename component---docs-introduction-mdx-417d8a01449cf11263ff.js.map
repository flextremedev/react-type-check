{"version":3,"sources":["webpack:///../docs/Introduction.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,0PACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYC,WAAW,KAAvB,oBAAH,8FACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,8DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gCAEL,4BACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,0CAEL,8BACE,iBAAGA,WAAW,cAAd,+EAEF,iBAAQ,CACN,GAAM,SADR,SAGA,oEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iSAcL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0W,qMAoBTJ,EAAWK,gBAAiB","file":"component---docs-introduction-mdx-417d8a01449cf11263ff.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/Flex/Documents/Workspace/react-type-check/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <h2 {...{\n      \"id\": \"the-problem\"\n    }}>{`The problem`}</h2>\n    <p>{`There cases when you want to check if a value is a React component. You might even want it to be typeguarded. Checking for React components isn't trivial at all. For example it depends on which JavaScript syntax you're using.`}</p>\n    <h2 {...{\n      \"id\": \"the-solution\"\n    }}>{`The solution`}</h2>\n    <p><inlineCode parentName=\"p\">{`react-type-check`}</inlineCode>{` checks if the value is some sort of a React component and also tells TypeScript if it is.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <p>{`Install this package as a dependency:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add react-type-check\n`}</code></pre>\n    <p>{`or `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save react-type-check\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: Make sure to have React version >= 16.8.0 installed as a dependency.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`After installing you can use it as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// JavaScript\nimport { isReactComponent } from 'react-type-check';\nlet maybeRC = () => <div>I'm a React component</div>;\nif (Math.random() > 0.5) {\n  maybeRC = 'Not RC';\n}\nif (isReactComponent(maybeRC)) {\n  const definitelyRC = maybeRC;\n} else {\n  const notRC = maybeRC;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// TypeScript\nimport { isReactComponent } from 'react-type-check';\nlet maybeRC: React.ComponentType | string = () => (\n  <div>I'm a React component</div>\n);\nif (Math.random() > 0.5) {\n  maybeRC = 'Not RC';\n}\nif (isReactComponent(maybeRC)) {\n  const definitelyRC: React.ComponentType = maybeRC;\n} else {\n  const notRC: string = maybeRC;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}