{"version":3,"sources":["webpack:///../docs/ApiReference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,uBADR,uBAGA,sFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,qVAeL,iBAAQ,CACN,GAAM,oBADR,oBAGA,mFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gcAoBL,iBAAQ,CACN,GAAM,uBADR,uBAGA,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qbAiBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,mFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6W,qMAoBTJ,EAAWK,gBAAiB","file":"component---docs-api-reference-mdx-2b0e2cf2f53292d829d4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/Flex/Documents/Workspace/react-type-check/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h1>\n    <h2 {...{\n      \"id\": \"isfunctioncomponent\"\n    }}>{`isFunctionComponent`}</h2>\n    <p>{`Determines if the passed value is a React function component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { isFunctionComponent } from 'react-type-check';\n\nlet maybeFC: React.FC | string = () => <div>I'm a function component!</div>;\nif (Math.random() > 0.5) {\n  maybeFC = 'Not FC';\n}\nif (isFunctionComponent(maybeFC)) {\n  const fc: React.FC = maybeFC;\n} else {\n  const notFC: string = maybeFC;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"isclasscomponent\"\n    }}>{`isClassComponent`}</h2>\n    <p>{`Determines if the passed value is a React class component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { isClassComponent } from 'react-type-check';\n\nclass ClassComponent extends React.Component {\n  render() {\n    return <div>I'm a class component!</div>;\n  }\n}\nlet maybeCC: React.ComponentClass | string = ClassComponent;\nif (Math.random() > 0.5) {\n  maybeCC = 'Not CC';\n}\nif (isClassComponent(maybeCC)) {\n  const cc: React.ComponentClass = maybeCC;\n} else {\n  const notCC: string = maybeCC;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ismemoizedcomponent\"\n    }}>{`isMemoizedComponent`}</h2>\n    <p>{`Determines if the passed value is a React.memo() memoized component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { isMemoizedComponent } from 'react-type-check';\n\nlet maybeMC:\n  | React.MemoExoticComponent<React.ComponentType>\n  | string = React.memo(() => <div>I'm a memoized component!</div>);\nif (Math.random() > 0.5) {\n  maybeMC = 'Not MC';\n}\nif (isMemoizedComponent(maybeMC)) {\n  const mc: React.MemoExoticComponent<React.ComponentType> = maybeMC;\n} else {\n  const notMC: string = maybeMC;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"isreactcomponent\"\n    }}>{`isReactComponent`}</h2>\n    <p>{`Determines if the passed value is a React class component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { isReactComponent } from 'react-type-check';\n\nlet maybeRC: React.ComponentType | string = () => <div>I'm some React component!</div>;\nif (Math.random() > 0.5) {\n  maybeRC = 'Not RC';\n}\nif (isReactComponent(maybeRC)) {\n  const rc: React.ComponentType = maybeRC;\n} else {\n  const notRC: string = maybeRC;\n}\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}